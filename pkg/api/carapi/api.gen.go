// Package carapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package carapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Car defines model for Car.
type Car struct {
	// Color The color of the car
	Color *string `json:"color,omitempty"`

	// CreatedAt The created_at of the car
	CreatedAt *string `json:"created_at,omitempty"`

	// Id The unique identifier for the car
	Id *string `json:"id,omitempty"`

	// Mark The mark of the car
	Mark *string `json:"mark,omitempty"`

	// Model The model of the car
	Model *string `json:"model,omitempty"`

	// Owner The owner of the car
	Owner *string `json:"owner,omitempty"`

	// RegNums The regNum of the car
	RegNums *string `json:"regNums,omitempty"`

	// UpdatedAt The updated_at of the car
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Year The year of the car
	Year *int `json:"year,omitempty"`
}

// GetCarsParams defines parameters for GetCars.
type GetCarsParams struct {
	// Mark Filter by car mark
	Mark *string `form:"mark,omitempty" json:"mark,omitempty"`

	// Model Filter by car model
	Model *string `form:"model,omitempty" json:"model,omitempty"`

	// RegNums Filter by car regNums
	RegNums *string `form:"regNums,omitempty" json:"regNums,omitempty"`

	// Owner Filter by car owner
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// Color Filter by car color
	Color *string `form:"color,omitempty" json:"color,omitempty"`

	// Year Filter by car year
	Year *string `form:"year,omitempty" json:"year,omitempty"`

	// Limit Number of items to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number to retrieve
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// PutCarsIdJSONBody defines parameters for PutCarsId.
type PutCarsIdJSONBody struct {
	// Color New color of the car
	Color *string `json:"color,omitempty"`

	// Mark New mark of the car
	Mark *string `json:"mark,omitempty"`

	// Model New model of the car
	Model *string `json:"model,omitempty"`

	// Owner New owner of the car
	Owner *string `json:"owner,omitempty"`
}

// PostCarsJSONRequestBody defines body for PostCars for application/json ContentType.
type PostCarsJSONRequestBody = Car

// PutCarsIdJSONRequestBody defines body for PutCarsId for application/json ContentType.
type PutCarsIdJSONRequestBody PutCarsIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCars request
	GetCars(ctx context.Context, params *GetCarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCarsWithBody request with any body
	PostCarsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCars(ctx context.Context, body PostCarsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCarsId request
	DeleteCarsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCarsIdWithBody request with any body
	PutCarsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCarsId(ctx context.Context, id string, body PutCarsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCars(ctx context.Context, params *GetCarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCarsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCarsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCarsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCars(ctx context.Context, body PostCarsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCarsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCarsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCarsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCarsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCarsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCarsId(ctx context.Context, id string, body PutCarsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCarsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCarsRequest generates requests for GetCars
func NewGetCarsRequest(server string, params *GetCarsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Mark != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mark", runtime.ParamLocationQuery, *params.Mark); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Model != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model", runtime.ParamLocationQuery, *params.Model); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegNums != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regNums", runtime.ParamLocationQuery, *params.RegNums); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Color != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "color", runtime.ParamLocationQuery, *params.Color); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCarsRequest calls the generic PostCars builder with application/json body
func NewPostCarsRequest(server string, body PostCarsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCarsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCarsRequestWithBody generates requests for PostCars with any type of body
func NewPostCarsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCarsIdRequest generates requests for DeleteCarsId
func NewDeleteCarsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCarsIdRequest calls the generic PutCarsId builder with application/json body
func NewPutCarsIdRequest(server string, id string, body PutCarsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCarsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCarsIdRequestWithBody generates requests for PutCarsId with any type of body
func NewPutCarsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCarsWithResponse request
	GetCarsWithResponse(ctx context.Context, params *GetCarsParams, reqEditors ...RequestEditorFn) (*GetCarsResponse, error)

	// PostCarsWithBodyWithResponse request with any body
	PostCarsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCarsResponse, error)

	PostCarsWithResponse(ctx context.Context, body PostCarsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCarsResponse, error)

	// DeleteCarsIdWithResponse request
	DeleteCarsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCarsIdResponse, error)

	// PutCarsIdWithBodyWithResponse request with any body
	PutCarsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCarsIdResponse, error)

	PutCarsIdWithResponse(ctx context.Context, id string, body PutCarsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCarsIdResponse, error)
}

type GetCarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Car
}

// Status returns HTTPResponse.Status
func (r GetCarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCarsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCarsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCarsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCarsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCarsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCarsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCarsWithResponse request returning *GetCarsResponse
func (c *ClientWithResponses) GetCarsWithResponse(ctx context.Context, params *GetCarsParams, reqEditors ...RequestEditorFn) (*GetCarsResponse, error) {
	rsp, err := c.GetCars(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCarsResponse(rsp)
}

// PostCarsWithBodyWithResponse request with arbitrary body returning *PostCarsResponse
func (c *ClientWithResponses) PostCarsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCarsResponse, error) {
	rsp, err := c.PostCarsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCarsResponse(rsp)
}

func (c *ClientWithResponses) PostCarsWithResponse(ctx context.Context, body PostCarsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCarsResponse, error) {
	rsp, err := c.PostCars(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCarsResponse(rsp)
}

// DeleteCarsIdWithResponse request returning *DeleteCarsIdResponse
func (c *ClientWithResponses) DeleteCarsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCarsIdResponse, error) {
	rsp, err := c.DeleteCarsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCarsIdResponse(rsp)
}

// PutCarsIdWithBodyWithResponse request with arbitrary body returning *PutCarsIdResponse
func (c *ClientWithResponses) PutCarsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCarsIdResponse, error) {
	rsp, err := c.PutCarsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCarsIdResponse(rsp)
}

func (c *ClientWithResponses) PutCarsIdWithResponse(ctx context.Context, id string, body PutCarsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCarsIdResponse, error) {
	rsp, err := c.PutCarsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCarsIdResponse(rsp)
}

// ParseGetCarsResponse parses an HTTP response from a GetCarsWithResponse call
func ParseGetCarsResponse(rsp *http.Response) (*GetCarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Car
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCarsResponse parses an HTTP response from a PostCarsWithResponse call
func ParsePostCarsResponse(rsp *http.Response) (*PostCarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCarsIdResponse parses an HTTP response from a DeleteCarsIdWithResponse call
func ParseDeleteCarsIdResponse(rsp *http.Response) (*DeleteCarsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCarsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCarsIdResponse parses an HTTP response from a PutCarsIdWithResponse call
func ParsePutCarsIdResponse(rsp *http.Response) (*PutCarsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCarsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get cars with filtering and pagination
	// (GET /cars)
	GetCars(w http.ResponseWriter, r *http.Request, params GetCarsParams)
	// Add new cars
	// (POST /cars)
	PostCars(w http.ResponseWriter, r *http.Request)
	// Delete a car by ID
	// (DELETE /cars/{id})
	DeleteCarsId(w http.ResponseWriter, r *http.Request, id string)
	// Update a car by ID
	// (PUT /cars/{id})
	PutCarsId(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get cars with filtering and pagination
// (GET /cars)
func (_ Unimplemented) GetCars(w http.ResponseWriter, r *http.Request, params GetCarsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new cars
// (POST /cars)
func (_ Unimplemented) PostCars(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a car by ID
// (DELETE /cars/{id})
func (_ Unimplemented) DeleteCarsId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a car by ID
// (PUT /cars/{id})
func (_ Unimplemented) PutCarsId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCars operation middleware
func (siw *ServerInterfaceWrapper) GetCars(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCarsParams

	// ------------- Optional query parameter "mark" -------------

	err = runtime.BindQueryParameter("form", true, false, "mark", r.URL.Query(), &params.Mark)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mark", Err: err})
		return
	}

	// ------------- Optional query parameter "model" -------------

	err = runtime.BindQueryParameter("form", true, false, "model", r.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	// ------------- Optional query parameter "regNums" -------------

	err = runtime.BindQueryParameter("form", true, false, "regNums", r.URL.Query(), &params.RegNums)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "regNums", Err: err})
		return
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", r.URL.Query(), &params.Owner)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Optional query parameter "color" -------------

	err = runtime.BindQueryParameter("form", true, false, "color", r.URL.Query(), &params.Color)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "color", Err: err})
		return
	}

	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", r.URL.Query(), &params.Year)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "year", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCars(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCars operation middleware
func (siw *ServerInterfaceWrapper) PostCars(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCars(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCarsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCarsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCarsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutCarsId operation middleware
func (siw *ServerInterfaceWrapper) PutCarsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutCarsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cars", wrapper.GetCars)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cars", wrapper.PostCars)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/cars/{id}", wrapper.DeleteCarsId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/cars/{id}", wrapper.PutCarsId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWTW/kNgz9KwLb4yAz2e7JtzRpi7kEwe72VBSFxqIdbS3J0UdSI/B/L0g5mXHGjnfd",
	"njIWw0fqiXzkM5TOtM6ijQGKZwjlPRrJP6+lpz+tdy36qJEPS9c4PlYYSq/bqJ2FAr7co2CTcJWI9CE9",
	"bCB2LUIBIXpta+g3UHqUEdVfMs5gvNoXgLSaBkhWPyQUWqGNutLoReX8e0BG+r+nociykIVxCpsZbzIt",
	"uLsnizNksmnB3WN9m0yYBsjGBYTUqnef42hfAOpQzlyELJPO2kas0UPfvx65w1csI/R0pG3lzhE//fL5",
	"i7i62/OrGmllrW1NuKKUUTauJnwdG0K7ll5c51NygQ08og8Z5/Jid7HjJ2jRylZDAT/x0QZaGe+Z020p",
	"Pf+ocYKeTxi9xkcMQopGByaIHMSTjvfC8b/JRlS6iUgsCWmVaClfSaYL4NieP/YKCvgN4zUFpAy8NBiR",
	"ov/xNu6vDCgOHd+aq5fIggIeEvoONmCloesPptzQlP+bR+s3C9Bc2zPYg201+EvpTsMfrasD5Naahn+x",
	"rQbPIjgN/mJbDc6tNI09mL4D+jaZQ9YRHdEEEZ3wGJO3okVP5YgzoRptdBzFUljJ1EQoPuxINf/RJhko",
	"Lnf0pe3wNdXdb3O6kzUKmxPL+XAjzSQy5DiRx+VC4D9JIUPrbMij68NulyeYjWi5o2XbNrrkFtx+DZTc",
	"80kgZox+/OixggJ+2B5H5XaYk1sakkcBk97LLuvX+M5XI41gzQvJGOm73Pkn0jGnGBSmdWFCiq6UEhaf",
	"MkZ0g9Sy8J3LzJ0LLzrj8SFhiD871X0XMYt89H0G1x4VFNEn7M/e4vL8Hp9TWWIIVWqaTkilUA1sbeBj",
	"frvx/+/to2y0EsM9xIEuMqb2lBo2sahvn7XqM16DEc+Rb/hcSG7Iyjtzyik1qo5B7G/O2c2OxO9eLSk5",
	"Tcf9zclspLcbMhp6gWbRsRW0gre8vicG5/X/cYHzHFy9zuoxlyNSDp3Y33BJpomK/J33BuEsCprTzqOo",
	"NDYq0G1fAeZIvEvxPzCYd5b/j8F1PfJNW/MtVeY3bM3TOyp5r99R2Xv9jkruyzvq9Gq3JA27hTIdttJj",
	"ma7Xh6FQRzXd9/2/AQAA//8U433IFg0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
